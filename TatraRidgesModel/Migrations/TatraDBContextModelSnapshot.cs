// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TatraRidges.Model.Entities;

#nullable disable

namespace TatraRidges.Model.Migrations
{
    [DbContext(typeof(TatraDbContext))]
    partial class TatraDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TatraRidges.Model.Entities.Adjective", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Adjectives");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.DescriptionAdjectivePair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdjectiveId")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdjectiveId");

                    b.HasIndex("RouteId");

                    b.ToTable("DescriptionAdjectivePairs");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Difficulty", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.DifficultyDetail", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("DifficultyDetails");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Guide", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.GuideDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("GuideId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Page")
                        .HasColumnType("smallint");

                    b.Property<short>("Volume")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.ToTable("GuideDescriptions");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.MountainPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Evaluation")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("PointTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("PrecisedEvaluation")
                        .HasColumnType("bit");

                    b.Property<string>("WikiAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WikiLatitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("WikiLongitude")
                        .HasColumnType("decimal(8,6)");

                    b.HasKey("Id");

                    b.HasIndex("PointTypeId");

                    b.ToTable("MountainPoints");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.PointsConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("PointId1")
                        .HasColumnType("int");

                    b.Property<int>("PointId2")
                        .HasColumnType("int");

                    b.Property<bool>("Ridge")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PointId1");

                    b.HasIndex("PointId2");

                    b.ToTable("PointsConnections");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.PointType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("PointTypes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("ConsistentDirection")
                        .HasColumnType("bit");

                    b.Property<byte>("DifficultyDetailId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DifficultyId")
                        .HasColumnType("tinyint");

                    b.Property<int>("GuideDescriptionId")
                        .HasColumnType("int");

                    b.Property<long>("PointsConnectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Rappeling")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("RouteTime")
                        .HasColumnType("time");

                    b.Property<byte>("RouteTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyDetailId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("GuideDescriptionId");

                    b.HasIndex("PointsConnectionId");

                    b.HasIndex("RouteTypeId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.RouteType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.DescriptionAdjectivePair", b =>
                {
                    b.HasOne("TatraRidges.Model.Entities.Adjective", "Adjective")
                        .WithMany("DescriptionAdjectivePairs")
                        .HasForeignKey("AdjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.Route", "Route")
                        .WithMany("DescriptionAdjectivePairs")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adjective");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.GuideDescription", b =>
                {
                    b.HasOne("TatraRidges.Model.Entities.Guide", "Guide")
                        .WithMany("GuideDescriptions")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.MountainPoint", b =>
                {
                    b.HasOne("TatraRidges.Model.Entities.PointType", "PointType")
                        .WithMany("MountainPoints")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.PointsConnection", b =>
                {
                    b.HasOne("TatraRidges.Model.Entities.MountainPoint", "MountainPoint1")
                        .WithMany("PointsConnections1")
                        .HasForeignKey("PointId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.MountainPoint", "MountainPoint2")
                        .WithMany("PointsConnections2")
                        .HasForeignKey("PointId2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MountainPoint1");

                    b.Navigation("MountainPoint2");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Route", b =>
                {
                    b.HasOne("TatraRidges.Model.Entities.DifficultyDetail", "DifficultyDetail")
                        .WithMany("Routes")
                        .HasForeignKey("DifficultyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.Difficulty", "Difficulty")
                        .WithMany("Routes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.GuideDescription", "GuideDescription")
                        .WithMany()
                        .HasForeignKey("GuideDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.PointsConnection", "PointsConnection")
                        .WithMany("Routes")
                        .HasForeignKey("PointsConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TatraRidges.Model.Entities.RouteType", "RouteType")
                        .WithMany("Routes")
                        .HasForeignKey("RouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("DifficultyDetail");

                    b.Navigation("GuideDescription");

                    b.Navigation("PointsConnection");

                    b.Navigation("RouteType");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Adjective", b =>
                {
                    b.Navigation("DescriptionAdjectivePairs");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Difficulty", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.DifficultyDetail", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Guide", b =>
                {
                    b.Navigation("GuideDescriptions");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.MountainPoint", b =>
                {
                    b.Navigation("PointsConnections1");

                    b.Navigation("PointsConnections2");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.PointsConnection", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.PointType", b =>
                {
                    b.Navigation("MountainPoints");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.Route", b =>
                {
                    b.Navigation("DescriptionAdjectivePairs");
                });

            modelBuilder.Entity("TatraRidges.Model.Entities.RouteType", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
